//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.5

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "craft2schedule")]
pub struct Model {
	#[sea_orm(primary_key)]
	pub id: u32,
	pub craft_id: i32,
	pub schedule_id: i32,
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
	Craft,
	Schedule,
}

impl RelationTrait for Relation {
	fn def(&self) -> RelationDef {
		match self {
			Self::Craft => Entity::belongs_to(super::craft::Entity)
				.from(Column::CraftId)
				.to(super::craft::Column::Id)
				.into(),
			Self::Schedule => Entity::belongs_to(super::schedule::Entity)
				.from(Column::ScheduleId)
				.to(super::schedule::Column::Id)
				.into(),
		}
	}
}

impl ActiveModelBehavior for ActiveModel {}
