//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.5

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};
use utoipa::ToSchema;
use super::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize, ToSchema)]
#[sea_orm(table_name = "user")]
pub struct Model {
	#[sea_orm(primary_key)]
	#[serde(skip_deserializing)]
	pub id: i32,
	pub role_type: Option<i32>,
	pub name: String,
	#[sea_orm(unique)]
	pub user: String,
	#[serde(skip_serializing)]
	pub password: String,
	#[serde(skip_serializing)]
	pub sign: String,
	pub dep: String,
	pub line: Option<serde_json::Value>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

impl ActiveModelBehavior for ActiveModel {}

impl super::user::Entity {
	pub async fn find_by_user_id(id: i32, db: &DbConn) -> Model {
		User::find_by_id(id).one(db).await.unwrap().unwrap()
	}
}
